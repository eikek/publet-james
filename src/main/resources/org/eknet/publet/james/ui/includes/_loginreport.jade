- import org.eknet.publet.james.stats.LoginStatsService
- import java.text.DateFormat
- import java.util.Date
-@ val stats: LoginStatsService
-@ val header: String
-@ val locale : java.util.Locale
-
  def formatDate(d: Date) = {
    DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, locale).format(d)
  }


h3 #{header}

h4 Overall

table.table.table-striped
  tr
    th Since
    th = formatDate(stats.getSince)
  tr
    td Connections
    td
      span.badge.badge-info
        =stats.getSuccessfulLogins + stats.getFailedLogins
  tr
    td Blocked Connections (Blacklist)
    td
      span.badge.badge-important
        =stats.getBlockedConnections
  tr
    td Successful Logins
    td
      span.badge.badge-success
        =stats.getSuccessfulLogins
  tr
    td Failed Logins
    td
      span.badge.badge-important
        =stats.getFailedLogins

- if (!stats.getUsernames.isEmpty)
  h4 By User

  table.table.table-striped.table-condensed
    tr
      th Username
      th Success
      th Failed
    - for (user <- stats.getUsernames)
      tr
        td =user
        td
          span.badge.badge-success
            =stats.getSuccessfulLogins(user)
        td
          span.badge.badge-important
            =stats.getFailedLogins(user)

- if (!stats.getIpAddresses.isEmpty)
  h4 By IP Address

  table.table.table-striped.table-condensed
    tr
      th IP
      th Success
      th Failed
    - for (ip <- stats.getIpAddresses)
      tr
        td =ip
        td
          span.badge.badge-success
            =stats.getSuccessfulLoginsByIp(ip)
        td
          span.badge.badge-important
            =stats.getFailedLoginsByIp(ip)